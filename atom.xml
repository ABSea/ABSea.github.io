<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ABSea</title>
  <subtitle>Practice makes perfect</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://absea.github.io/"/>
  <updated>2016-02-26T14:25:52.000Z</updated>
  <id>http://absea.github.io/</id>
  
  <author>
    <name>AndyChan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github 搭建 hexo （四）</title>
    <link href="http://absea.github.io/2016/01/04/Github%20%E6%90%AD%E5%BB%BA%20hexo%20%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://absea.github.io/2016/01/04/Github 搭建 hexo （四）/</id>
    <published>2016-01-04T14:00:00.000Z</published>
    <updated>2016-02-26T14:25:52.000Z</updated>
    
    <content type="html">&lt;p&gt;在github page 上显示hexo生成的静态博客，因为github支持的是静态博客，所以本章就在前两章的基础上，在github上显示hexo 搭建的博客。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo 默认支持disqus，所以修改起来比较简单。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;#(一)更换主题&lt;/p&gt;
&lt;p&gt;本次使用的主题是一个白色风格的&lt;a href=&quot;https://github.com/tufu9441/maupassant-hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简洁主题&lt;/a&gt;，进入这个主题后就会发现其使用方法。&lt;/p&gt;
&lt;p&gt;进入hexo 安装目录，也就是初始化的目录（hexo init  githexo）中的githexo目录，详细目录请根据自己定义的目录名字为主，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;进入该目录后，输入下面的命令：&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;接下来一定要输入下面的命令，来安装这个主题的依赖环境。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-renderer-sass --save&amp;#10;npm install hexo-renderer-jade --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;然后就会在themes目录下多出来个主题文件夹 maupassant：&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220001304735&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;然后在根目录修改根目录中的 _config.yml 如下，将theme后面的文件名修改为maupassant,具体名字还得看自己想设置什么主题了&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220001617099&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;然后输入&lt;code&gt;hexo s&lt;/code&gt; 或者 &lt;code&gt;hexo server&lt;/code&gt; 就可以查看更换后的主题效果了，这里就不贴图展示了。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;23_28_u4E8C_29_u6DFB_u52A0disqus__u8BC4_u8BBA_u7CFB_u7EDF&quot;&gt;&lt;a href=&quot;#23_28_u4E8C_29_u6DFB_u52A0disqus__u8BC4_u8BBA_u7CFB_u7EDF&quot; class=&quot;headerlink&quot; title=&quot;#(二)添加disqus 评论系统&quot;&gt;&lt;/a&gt;#(二)添加disqus 评论系统&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以用到的评论系统有挺多的，多说，disqus等，这里只mark下disqus， &lt;/li&gt;
&lt;li&gt;disqus 的添加跟主题有关，因为hexo自带disqus，所以添加起来非常简单，这里讲下默认的主题landscape 和 上面演示的主题&lt;a href=&quot;https://github.com/tufu9441/maupassant-hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maupassant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Step_1_uFF1A&quot;&gt;&lt;a href=&quot;#Step_1_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;Step 1：&quot;&gt;&lt;/a&gt;Step 1：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;进入&lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;disqus官网&lt;/a&gt;， 点击蓝色框中链接，给自己的网站添加disqus，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220002850413&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###Step 2：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击后，出现下图，输入网站名字。然后在第二个输入框填写自己的唯一disqus识别名称，这个名称会在后面用到，比如我这里填写的是我最常用的absea。然后点击&lt;strong&gt;Next&lt;/strong&gt;按钮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220003146381&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###Step 3：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面点击Next后就会出现下面页面，这里面会有disqus在不同博客系统上或者其他系统上对应的代码。因为hexo自带支持disqus，所以不需要这里面的代码，这个页面的内容会在其他除hexo之外的博客系统中用到，如果是hexo搭建博客disqus，可以跳过。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220003532601&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###Step 4：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后在主题的配置文件，主题的配置文件，主题的配置文件，重要的说三遍，在主题的配置文件_config.yml的disqus后面添加step 2中使用的唯一的disqus识别名字。这里我使用的是absea，&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意这里absea后面和##注释必须隔开一个空格，因为.jade文件是代码风格严格的。如果没有这个空格，那就没有disqus效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220004055884&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###Step 5：&lt;br&gt;然后输入 &lt;code&gt;hexo s&lt;/code&gt;或者&lt;code&gt;hexo server&lt;/code&gt; 就会出现disqus的效果：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220004704154&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是默认的主题landscape，只需要在hexo主配置文件，hexo主配置文件，hexo主配置文件，说三遍，在hexo主配置文件里面添加下面白色框中的内容就可以了，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220010203251&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;#(三)添加RSS 订阅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加RSS 订阅很简单，已经有成熟的依赖模块可以使用，在hexo init即初始化目录输入下面的命令即可，&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220005114375&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后在主题的配置文件里面如下图白色框里面修改：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220005719042&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后输入 &lt;code&gt;hexo clean&lt;/code&gt;（即清理临时数据库），然后输入&lt;code&gt;hexo s&lt;/code&gt;就可以进入页面后，点解RSS就可以看到下面的效果了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160220005818652&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;#RSS还有个关键的一步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在主配置文件里面的URL一定要更改，不然RSS订阅不会成功，见下图白色框框中，这里填写自己网站地址即可：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160226221343160&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后提交到github上后，点击rss 订阅就会成功。就是下图这样的效果，不会提交可以参见本博客系列的其他mark记录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160226221715209&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在github page 上显示hexo生成的静态博客，因为github支持的是静态博客，所以本章就在前两章的基础上，在github上显示hexo 搭建的博客。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo 默认支持disqu
    
    </summary>
    
      <category term="github blog" scheme="http://absea.github.io/categories/github-blog/"/>
    
    
      <category term="github" scheme="http://absea.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://absea.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github 搭建 hexo （三）</title>
    <link href="http://absea.github.io/2016/01/03/Github%20%E6%90%AD%E5%BB%BA%20hexo%20%EF%BC%88%E4%B8%89/"/>
    <id>http://absea.github.io/2016/01/03/Github 搭建 hexo （三/</id>
    <published>2016-01-03T12:00:00.000Z</published>
    <updated>2016-02-20T14:59:20.000Z</updated>
    
    <content type="html">&lt;p&gt;在github page 上显示hexo生成的静态博客，因为github支持的是静态博客，所以本章就在前两章的基础上，在github上显示hexo 搭建的博客。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo 环境，没有请看&lt;a href=&quot;http://blog.csdn.net/u010053344/article/details/50689446&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;搭建方法&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;本地git环境&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_1_uFF1A&quot;&gt;&lt;a href=&quot;#step_1_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 1：&quot;&gt;&lt;/a&gt;step 1：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入&lt;a href=&quot;http://blog.csdn.net/u010053344/article/details/50689446&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github 搭建 hexo（一）&lt;/a&gt;中建立的目录中，输入&lt;code&gt;hexo g&lt;/code&gt;  或者 &lt;code&gt;hexo generate&lt;/code&gt; 生成静态博客，这个静态博客就在&lt;code&gt;public&lt;/code&gt;目录中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219225635310&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下图是生成的静态博客目录结构，也就是在public中的所有文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219225722392&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_2_uFF1A&quot;&gt;&lt;a href=&quot;#step_2_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 2：&quot;&gt;&lt;/a&gt;step 2：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将上面所生成的所有的静态博客目录内容，都复制到&lt;a href=&quot;http://blog.csdn.net/u010053344/article/details/50700717&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github 搭建 hexo（二）&lt;/a&gt;中所克隆的github仓库的目录中，然后输入 &lt;code&gt;git add --all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219225752017&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_3_uFF1A&quot;&gt;&lt;a href=&quot;#step_3_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 3：&quot;&gt;&lt;/a&gt;step 3：&lt;/h2&gt;&lt;p&gt;输入 &lt;code&gt;git commit -m &amp;quot;commit message&amp;quot;&lt;/code&gt;提交到本地仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219225808204&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_4_uFF1A&quot;&gt;&lt;a href=&quot;#step_4_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 4：&quot;&gt;&lt;/a&gt;step 4：&lt;/h2&gt;&lt;p&gt;输入 &lt;code&gt;git push -u origin master&lt;/code&gt;将静态内容提交到github上的仓库中。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219225848861&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_5_uFF1A&quot;&gt;&lt;a href=&quot;#step_5_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 5：&quot;&gt;&lt;/a&gt;step 5：&lt;/h2&gt;&lt;p&gt;在浏览器中输入 &lt;code&gt;http://yourname.github.io/&lt;/code&gt;进入刚刚上传的静态hexo博客，然后就可以看到这样的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219225915486&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;尽情享受自己的私人博客吧&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在github page 上显示hexo生成的静态博客，因为github支持的是静态博客，所以本章就在前两章的基础上，在github上显示hexo 搭建的博客。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hexo 环境，没有请看&lt;a href=&quot;http
    
    </summary>
    
      <category term="github blog" scheme="http://absea.github.io/categories/github-blog/"/>
    
    
      <category term="github" scheme="http://absea.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://absea.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github 搭建 hexo （二）</title>
    <link href="http://absea.github.io/2016/01/02/Github%20%E6%90%AD%E5%BB%BA%20hexo%20%EF%BC%88%E4%BA%8C%EF%BC%89%20/"/>
    <id>http://absea.github.io/2016/01/02/Github 搭建 hexo （二） /</id>
    <published>2016-01-02T12:05:00.000Z</published>
    <updated>2016-02-20T14:59:21.000Z</updated>
    
    <content type="html">&lt;p&gt;在github page 上显示helloworld，这次不是本地效果咯。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github账号 &lt;/li&gt;
&lt;li&gt;本地git环境&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_1_uFF1A&quot;&gt;&lt;a href=&quot;#step_1_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 1：&quot;&gt;&lt;/a&gt;step 1：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建一个仓库，名字以自己的github名字开头,即&lt;code&gt;yourName.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219223820618&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_2_uFF1A&quot;&gt;&lt;a href=&quot;#step_2_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 2：&quot;&gt;&lt;/a&gt;step 2：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;把上面的仓库克隆到自己的电脑一个自定义的目录，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219223047682&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_3_uFF1A&quot;&gt;&lt;a href=&quot;#step_3_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 3：&quot;&gt;&lt;/a&gt;step 3：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入克隆后的目录。&lt;/li&gt;
&lt;li&gt;创建一个html文件，并写入内容。比如使用 &lt;code&gt;echo &amp;quot;hello world&amp;quot; &amp;gt; index.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219223108464&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_4_uFF1A&quot;&gt;&lt;a href=&quot;#step_4_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 4：&quot;&gt;&lt;/a&gt;step 4：&lt;/h2&gt;&lt;p&gt;然后commit到 github 上，使用 &lt;code&gt;git commit -m &amp;quot;commit message&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219223130496&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_5_uFF1A&quot;&gt;&lt;a href=&quot;#step_5_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 5：&quot;&gt;&lt;/a&gt;step 5：&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;git push -u origin master&lt;/code&gt;，提交到github服务器&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160219223144980&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;这样之后就可以进入&lt;code&gt;http://yourname.github.io/&lt;/code&gt;，将yourname换成你的github名字就行了，查看helloworld的效果了，这里就不展示效果了。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在github page 上显示helloworld，这次不是本地效果咯。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github账号 &lt;/li&gt;
&lt;li&gt;本地git环境&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_1_uFF1A&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="github blog" scheme="http://absea.github.io/categories/github-blog/"/>
    
    
      <category term="github" scheme="http://absea.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://absea.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github 搭建 hexo （一）</title>
    <link href="http://absea.github.io/2016/01/01/Github%20%E6%90%AD%E5%BB%BA%20hexo%20%EF%BC%88%E4%B8%80/"/>
    <id>http://absea.github.io/2016/01/01/Github 搭建 hexo （一/</id>
    <published>2016-01-01T11:05:00.000Z</published>
    <updated>2016-02-20T14:59:04.000Z</updated>
    
    <content type="html">&lt;p&gt;在git上做博客。&lt;br&gt;写个博客记录下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电脑上配备 nodejs 环境，因为要用到nodejs的包管理器&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/linjiqin/p/3765772.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt;， 如果是mac或者Linux可参见本&lt;a href=&quot;http://blog.csdn.net/u010053344/article/details/50545304&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下面有的安装命令需要root权限&lt;/li&gt;
&lt;li&gt;如果安装不上，需要用到淘宝镜像，或者开VPN&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_1_uFF1A&quot;&gt;&lt;a href=&quot;#step_1_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 1：&quot;&gt;&lt;/a&gt;step 1：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入root模式&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;npm install hexo-cli -g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160218224055502&quot; alt=&quot;安装hexo-cli&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_2_uFF1A&quot;&gt;&lt;a href=&quot;#step_2_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 2：&quot;&gt;&lt;/a&gt;step 2：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输入 &lt;code&gt;npm install  --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160218224505800&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_3_uFF1A&quot;&gt;&lt;a href=&quot;#step_3_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 3：&quot;&gt;&lt;/a&gt;step 3：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输入 &lt;code&gt;hexo init githexo&lt;/code&gt; （githexo是个自己定义的目录）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160218224804618&quot; alt=&quot;hexo 初始化&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;初始化后的目录结构：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160218225002183&quot; alt=&quot;初始化后的目录结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;_config.yml&lt;/em&gt; ——是博客主要配置文件 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;db.json&lt;/em&gt;——是博客数据库 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;node_modules&lt;/em&gt;——是NodeJS依赖模块 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;source&lt;/em&gt;——是博客内容以及其他页面（page）存在的目录，这个目录里面有个_post目录就是我们存放博客内容的地方，也就是存放博客内容markdown文档地方，输入&lt;code&gt;hexo new “newPage”&lt;/code&gt;就会在这个目录建立一个名为newPage的子目录，然后在里面放入md文档，并在主题的配置文件里面添加相应栏目newPage，这样就会显示在主页面的目录上。（将在后续有所mark）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;themes&lt;/em&gt;——是主题存放文件&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_4_uFF1A&quot;&gt;&lt;a href=&quot;#step_4_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 4：&quot;&gt;&lt;/a&gt;step 4：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输入 &lt;code&gt;hexo server&lt;/code&gt; 或者 &lt;code&gt;hexo s&lt;/code&gt; 开启hexo博客新篇章&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160218230200168&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开 &lt;a href=&quot;http://0.0.0.0:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://0.0.0.0:4000/&lt;/a&gt; 即可看到博客界面：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160218230416526&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;本此介绍采用的是默认主题 landscape。界面比较清新，代码区域也有黑色标记，值得推荐使用默认。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在git上做博客。&lt;br&gt;写个博客记录下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电脑上配备 nodejs 环境，因为要用到nodejs的包管理器&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/linjiqin/p/37657
    
    </summary>
    
      <category term="github blog" scheme="http://absea.github.io/categories/github-blog/"/>
    
    
      <category term="github" scheme="http://absea.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://absea.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装nodejs</title>
    <link href="http://absea.github.io/2015/11/07/mac%E5%AE%89%E8%A3%85nodejs/"/>
    <id>http://absea.github.io/2015/11/07/mac安装nodejs/</id>
    <published>2015-11-07T14:44:12.000Z</published>
    <updated>2016-02-13T15:11:22.000Z</updated>
    
    <content type="html">&lt;p&gt;这几日因为需求需要又临时用到nodejs，之前安装过好几次，但是每次还是忍不住百度下，所以这次在此mark下 Mac 下 nodejs 的安装和检验，给自己留个标记，提高下以后的效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_1_uFF1A&quot;&gt;&lt;a href=&quot;#step_1_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 1：&quot;&gt;&lt;/a&gt;step 1：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问nodejs官网，点击蓝色选框区域稳定版，并下载&lt;/strong&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160119220635178&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_2_uFF1A&quot;&gt;&lt;a href=&quot;#step_2_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 2：&quot;&gt;&lt;/a&gt;step 2：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双击刚下载的文件，按步骤默认安装就行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160119213011705&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_3_uFF1A&quot;&gt;&lt;a href=&quot;#step_3_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 3：&quot;&gt;&lt;/a&gt;step 3：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装完成后打开终端，输入 &lt;/strong&gt;&lt;br&gt;&lt;em&gt;npm -v&lt;/em&gt;&lt;br&gt;&lt;em&gt;node  -v&lt;/em&gt;&lt;br&gt;两个命令，如下图出现版本信息，说明安装成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160119213637848&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_4_uFF1A&quot;&gt;&lt;a href=&quot;#step_4_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;step 4：&quot;&gt;&lt;/a&gt;step 4：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新建一个js文件，nodejsTest.js , 输入下面的代码, 并保存&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	response.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	response.write(&lt;span class=&quot;string&quot;&gt;&quot;Welcome to Nodejs&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	response.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Creat server on http://127.0.0.1:8000/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打开终端进入 nodejsTest.js  所在目录， 输入 node nodejsTest&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160119221254453&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打开浏览器，点击或者输入&lt;a href=&quot;http://127.0.0.1:8000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:8000/&lt;/a&gt;， 如果无法打开，可以去掉.listen(8000, “127.0.0.1”) 中得ip监听改成   .listen(8000)，然后点击或者输入&lt;a href=&quot;http://localhost:8000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8000/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160119220606037&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几日因为需求需要又临时用到nodejs，之前安装过好几次，但是每次还是忍不住百度下，所以这次在此mark下 Mac 下 nodejs 的安装和检验，给自己留个标记，提高下以后的效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step_1_uFF1A&quot;&gt;&lt;a href=&quot;#ste
    
    </summary>
    
      <category term="NodeJS" scheme="http://absea.github.io/categories/NodeJS/"/>
    
    
      <category term="Linux" scheme="http://absea.github.io/tags/Linux/"/>
    
      <category term="Mac" scheme="http://absea.github.io/tags/Mac/"/>
    
      <category term="NodeJS" scheme="http://absea.github.io/tags/NodeJS/"/>
    
      <category term="安装" scheme="http://absea.github.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>UILabel多行自适应计算高度存在的坑</title>
    <link href="http://absea.github.io/2015/05/07/UILabel%E5%A4%9A%E8%A1%8C%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E8%AE%A1%E7%AE%97%E9%AB%98%E5%BA%A6%E5%AD%98%E5%9C%A8%E7%9A%84%E5%9D%91/"/>
    <id>http://absea.github.io/2015/05/07/UILabel多行高度自适应计算高度存在的坑/</id>
    <published>2015-05-07T10:44:12.000Z</published>
    <updated>2016-02-13T13:41:28.000Z</updated>
    
    <content type="html">&lt;p&gt;本文来说明[UILabel][6]在实现多行文本时，计算文本的高度存在的一个问题，因为这个问题之前遇到过很多次，特在测mark一下，给自己留个痕迹，以免后面再碰到，涉及到讨论的两种方法（这两种方法都存在这样的问题）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NSMutableAttributedString  的 &lt;em&gt;addAttributes&lt;/em&gt; 方法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;boundingRectWithSize&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;u95EE_u9898_u5C55_u793A_uFF1A&quot;&gt;&lt;a href=&quot;#u95EE_u9898_u5C55_u793A_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;问题展示：&quot;&gt;&lt;/a&gt;问题展示：&lt;/h2&gt;&lt;p&gt;先看下图片，展示下问题（测试条件）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具有图片&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单行的文字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目前在模拟器上出现的问题，真机尚未测试&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看出“第三个格子的文本覆盖了右上角的时间文字”，但是第四行的文字却没有，两个cell的通过肉眼就能发现是一样的高度，那么问题是什么呢。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160114223813373&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;u95EE_u9898_u5206_u6790_uFF1A&quot;&gt;&lt;a href=&quot;#u95EE_u9898_u5206_u6790_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;问题分析：&quot;&gt;&lt;/a&gt;问题分析：&lt;/h2&gt;&lt;p&gt;####下面说明下两种出现这种问题的方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种计算高度方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;&amp;#10;----------&amp;#10;&amp;#20027;&amp;#35201;&amp;#20195;&amp;#30721;&amp;#10;------&amp;#10;&amp;#10;//NSStringDrawingUsesFontLeading &amp;#20197;&amp;#23383;&amp;#20307;&amp;#38388;&amp;#34892;&amp;#36317;&amp;#20301;&amp;#35745;&amp;#31639;&amp;#26041;&amp;#24335;&amp;#65288;&amp;#23383;&amp;#20307;&amp;#39640;&amp;#24230; + &amp;#34892;&amp;#38388;&amp;#36317;&amp;#65289;&amp;#10;//NSStringDrawingUsesLineFragmentOrigin &amp;#20197;&amp;#27599;&amp;#34892;&amp;#32452;&amp;#25104;&amp;#30340;&amp;#30697;&amp;#24418;&amp;#35745;&amp;#31639;&amp;#39640;&amp;#24230;&amp;#10;&amp;#10; - NSStringDrawingOptions Option =NSStringDrawingUsesLineFragmentOrigin&amp;#10;   | NSStringDrawingUsesFontLeading;&amp;#10;   &amp;#10;   NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc]&amp;#10;   init]; [style setLineBreakMode:NSLineBreakByWordWrapping];&amp;#10;&amp;#10;    &amp;#10;NSDictionary *attributes = @&amp;#123; NSFontAttributeName : ChatContentFont, NSParagraphStyleAttributeName : style &amp;#125;;&amp;#10;&amp;#10;contentSize = [strContent boundingRectWithSize:CGSizeMake(textContentWidth, CGFLOAT_MAX) options:Option attributes: attributes context:nil].size;&amp;#10;&amp;#10;&amp;#26368;&amp;#21518;&amp;#65306;&amp;#10;labelHeight = contentSize.height;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第二种计算高度方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#10;&amp;#10;----------&amp;#10;&amp;#20027;&amp;#35201;&amp;#20195;&amp;#30721;&amp;#10;------&amp;#10;&amp;#10;//NSStringDrawingUsesFontLeading &amp;#20197;&amp;#23383;&amp;#20307;&amp;#38388;&amp;#34892;&amp;#36317;&amp;#20301;&amp;#35745;&amp;#31639;&amp;#26041;&amp;#24335;&amp;#65288;&amp;#23383;&amp;#20307;&amp;#39640;&amp;#24230; + &amp;#34892;&amp;#38388;&amp;#36317;&amp;#65289;&amp;#10;//NSStringDrawingUsesLineFragmentOrigin &amp;#20197;&amp;#27599;&amp;#34892;&amp;#32452;&amp;#25104;&amp;#30340;&amp;#30697;&amp;#24418;&amp;#35745;&amp;#31639;&amp;#39640;&amp;#24230;&amp;#10;&amp;#10; - NSStringDrawingOptions Option =NSStringDrawingUsesLineFragmentOrigin&amp;#10;   | NSStringDrawingUsesFontLeading;&amp;#10;   &amp;#10;NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc]&amp;#10;   init]; [style setLineBreakMode:NSLineBreakByWordWrapping];&amp;#10;&amp;#10;UILabel *labelStr = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, textContentWidth, CGFLOAT_MAX)];&amp;#10;//&amp;#35774;&amp;#32622;numberOfLine = 0 ,&amp;#34920;&amp;#31034;&amp;#22810;&amp;#34892;&amp;#26174;&amp;#31034;&amp;#10;labelStr.numberOfLines = 0;&amp;#10;            &amp;#10;NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc] initWithString:_message.strContent];&amp;#10;            &amp;#10;CGFloat actualTextLen = textContentWidth;&amp;#10;if (attrStr.length &amp;#60; textContentWidth) &amp;#123;          &amp;#10;&amp;#9;actualTextLen = attrStr.length;&amp;#10;&amp;#125;&amp;#10;&amp;#10;//range &amp;#21442;&amp;#25968;&amp;#34920;&amp;#31034;&amp;#20174;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#30340;0&amp;#20301;&amp;#32622;&amp;#24320;&amp;#22987;&amp;#30340;actualTextLen&amp;#20010;&amp;#23383;&amp;#31526;&amp;#10;//&amp;#20026;&amp;#36825;&amp;#20010;&amp;#33539;&amp;#22260;&amp;#20869;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#28155;&amp;#21152;&amp;#23545;&amp;#24212;&amp;#30340;&amp;#23646;&amp;#24615;&amp;#10;[attrStr addAttributes:attributes range:NSMakeRange(0, actualTextLen)];&amp;#10;labelStr.attributedText = attrStr;&amp;#10;[labelStr sizeToFit];&amp;#10;&amp;#10;&amp;#26368;&amp;#21518;&amp;#65306;&amp;#10;labelHeight = labelStr.frame.size.height&amp;#65307;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;23_23_23_23_u8FD9_u4E24_u79CD_u65B9_u6CD5_u90FD_u4F1A_u9020_u6210_u4E0A_u9762_u56FE_u7247_u6240_u63CF_u8FF0_u7684_u95EE_u9898_uFF1A_u5176_u6253_u5370_u51FA_u6765_u7684_u9AD8_u5EA6_u89C1_u4E0B_u56FE_uFF1A&quot;&gt;&lt;a href=&quot;#23_23_23_23_u8FD9_u4E24_u79CD_u65B9_u6CD5_u90FD_u4F1A_u9020_u6210_u4E0A_u9762_u56FE_u7247_u6240_u63CF_u8FF0_u7684_u95EE_u9898_uFF1A_u5176_u6253_u5370_u51FA_u6765_u7684_u9AD8_u5EA6_u89C1_u4E0B_u56FE_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;####这两种方法都会造成上面图片所描述的问题：其打印出来的高度见下图：&quot;&gt;&lt;/a&gt;####这两种方法都会造成上面图片所描述的问题：其打印出来的高度见下图：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160115074931409&quot; alt=&quot;注意看第五行&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面的结果打印出来的值解释（以第五行为例）：&lt;br&gt;17.000000          —     16.707031 对应&lt;br&gt;第二种计算方法 — 第一种计算方法&lt;/p&gt;
&lt;h2 id=&quot;u5206_u6790_u7ED3_u679C_uFF1A&quot;&gt;&lt;a href=&quot;#u5206_u6790_u7ED3_u679C_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;分析结果：&quot;&gt;&lt;/a&gt;分析结果：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;经过测试下，这种情况只有在文字的长度小于一行时才会出现&lt;/li&gt;
&lt;li&gt;当刚满一行时就计算成33了，如第一张图的第三个cell显示的那样&lt;/li&gt;
&lt;li&gt;而且在简单测试时候发现只有存在图片时候会出现这样的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt; &lt;strong&gt;&lt;em&gt;结论&lt;/em&gt;&lt;/strong&gt;就是：在单行不满的情况下，如果“文字Label”具有背景色的时候，就会出现布局上面的问题，在table滑动的时候会出现“文字Label”背景色加高从而覆盖右上角的“时间”Label的问题。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;u89E3_u51B3_u529E_u6CD5_uFF1A&quot;&gt;&lt;a href=&quot;#u89E3_u51B3_u529E_u6CD5_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;解决办法：&quot;&gt;&lt;/a&gt;解决办法：&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;因为这样会影响用户的体验效果，所以参照log打印出来的值，第四行和第五行，同样是显示一行，一个高度是33，一个高度是17。所以问题最简单的处理方法就是在17 的基础上加上18，也就是判断高度的值，如果小于33，就加上18，如果没有就以计算的原值为最终计算的高度值， &lt;strong&gt;17 + 18 = 35&lt;/strong&gt;，多了两个高度点（这个值可以自己上下调节两三个高度点）&lt;br&gt;，然后最终的效果出来，如下图：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160115080626721&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;经简单测试，这样修改后，在随意的滑动table时候，“文字Label”的背景色不会出现上述的问题；&lt;/p&gt;
&lt;p&gt;因时间关系，目前只探索到这里，后续有更好的令人信服的方法时，再更新，也欢迎有大神提出更好的方案。&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文来说明[UILabel][6]在实现多行文本时，计算文本的高度存在的一个问题，因为这个问题之前遇到过很多次，特在测mark一下，给自己留个痕迹，以免后面再碰到，涉及到讨论的两种方法（这两种方法都存在这样的问题）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NSMu
    
    </summary>
    
      <category term="IOS" scheme="http://absea.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="http://absea.github.io/tags/IOS/"/>
    
      <category term="UILabel" scheme="http://absea.github.io/tags/UILabel/"/>
    
      <category term="高度计算" scheme="http://absea.github.io/tags/%E9%AB%98%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
